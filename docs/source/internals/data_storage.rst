.. _internal_architecture:data-storage:

************
Data storage
************

.. todo::

    .. _internal_architecture:orm:database:

    title: Database schema & migrations

    `#4035`_

    .. _internal_architecture:orm:repository:

    title: File repository

    `#4036`_

.. _internal_architecture:orm:archive:

AiiDA archive format
====================

An AiiDA archive file is a file usually ending with extension ``.aiida``, typically compressed in ``.zip`` or ``.tar.gz`` format, with the following content:

* ``metadata.json`` file containing information on the version of AiiDA as well as the database schema.
* ``data.json`` file containing the nodes and their links.
* ``nodes/`` directory containing the repository files corresponding to the nodes.

.. _internal_architecture:orm:archive:metadata-json:

``metadata.json``
-----------------

This file contains important information, and it is necessary for the correct interpretation of ``data.json``.
Apart from the data schema, the AiiDA and archive versions are also mentioned.
This is used to avoid any incompatibilities among different versions of AiiDA.
It should be noted that the schema described in ``metadata.json`` is related to the data itself - abstracted schema focused on the extracted information - and not how the data is stored in the database (database schema).
This makes the import/export mechanism transparent to the database system used, backend selected and how the data is organised in the database (database schema).

Let's have a look at the contents of ``metadata.json``:

.. literalinclude :: includes/metadata.json
   :language: json

At the beginning of the file, we see the version of the archive file (under ``export_version``) and the version of the AiiDA code.
New archive versions are introduced for several different reasons; this may generally be when:

* a change occurs in what can or cannot be exported for each entity,
* the database and/or archive schemes are updated or changed,
* or standardized exported property values are updated in AiiDA.

.. note::
    For archives of version 0.3 and older it is advisable that you manually try to convince yourself that the migration was completely successful.
    While all migrations are tested, trying to include reasonable edge-cases, the migrations involed from version 0.3 to 0.4 are intricate and the possibility of a missing edge-case test is quite real.
    It is worth noting that if you ever have an issue, please report it on `GitHub <https://www.github.com/aiidateam/aiida_core/issues/new>`_, join the `AiiDA mailing list <http://www.aiida.net/mailing-list/>`_, or use the `contact form <http://www.aiida.net/contact-new/>`_.

The entities that are exported are mentioned in ``unique_identifiers`` with their respective unique identifiers.
Knowing the unique IDs is useful for duplicate avoidance (in order to avoid the insertion of the node multiple times).

Then in ``all_fields_info``, the properties of each entity are mentioned.
The correlations with other entities are also mentioned.
For example, the entity ``Node`` is related to a ``Computer`` and a ``User``.
The corresponding entity names appear nested next to the properties to show this correlation.

.. note::

    If you have migrated an archive file to the newest version, there may be an extra entry in ``metadata.json``.
    This simply states from which archive version the file was migrated.

.. note::

    If you supply an old archive file that the current AiiDA code does not support, ``verdi archive import`` will automatically try to migrate the archive by calling ``verdi archive migrate``.

.. _internal_architecture:orm:archive:data-json:

``data.json``
-------------

A sample of the ``data.json`` file follows:

.. literalinclude :: includes/data.json
   :language: json

At the start of the JSON file shown above, the links among the various AiiDA nodes are stated (``links_uuid`` field).
For every link the UUIDs of the connected nodes, as well as the name of the link, are mentioned.

Then follows the data "grouped" into entity types.
It is worth noticing the references between the instances of the various entities.
For example the DbNode with identifier 5921143 belongs to the user with identifier 2 and was generated by the computer with identifier 1.

The name of the entities is a reference to the base ORM entities.
This ensures that the archive files are compatible between different actual database backend/schema implementations (e.g. Django, SQLAlchemy, ...).

If any groups are extracted, then they are mentioned in the corresponding field (``groups_uuid``).

Attributes and extras of the extracted nodes, are described in the final part of the JSON file.
The identifier of the corresponding node is used as a key for the attribute or extra.


.. _#4035: https://github.com/aiidateam/aiida-core/issues/4035
.. _#4036: https://github.com/aiidateam/aiida-core/issues/4036
