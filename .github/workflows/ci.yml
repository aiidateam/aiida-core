name: continuous-integration

on: [push, pull_request]

jobs:

  docs:

    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@master

    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install system dependencies
      # remove occasionally problematic repositories we don't use anyway
      run: |
        sudo rm -f /etc/apt/sources.list.d/dotnetdev.list /etc/apt/sources.list.d/microsoft-prod.list
        sudo apt update
        sudo apt install texlive-base texlive-generic-recommended texlive-fonts-recommended texlive-latex-base texlive-latex-recommended texlive-latex-extra dvipng dvidvi

    - name: Install python dependencies
      run: |
        pip install numpy==1.17.4
        pip install -e .[docs,testing]

    - name: Build documentation
      env:
        READTHEDOCS: 'True'
      run:
        SPHINXOPTS='-nW' make -C docs html

  pre-commit:

    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@master

    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install system dependencies
      run: |
        sudo rm -f /etc/apt/sources.list.d/dotnetdev.list /etc/apt/sources.list.d/microsoft-prod.list
        sudo apt update
        sudo apt install libkrb5-dev ruby ruby-dev

    - name: Install python dependencies
      run: |
        pip install numpy==1.17.4
        pip install -e .[all]
        pip freeze

    - name: Run pre-commit
      run:
        pre-commit run --all-files || ( git status --short ; git diff ; exit 1 )

  tests:

    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        backend: ['django', 'sqlalchemy']
        python-version: [3.5, 3.8]

    steps:
    - uses: actions/checkout@master
    - uses: CasperWA/postgresql-action@v1.2
      with:
        postgresql version: '10'
        postgresql db: test_${{ matrix.backend }}
        postgresql user: postgres
        postgresql password: ''
        postgresql auth: trust

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        wget -O - "https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc" | sudo apt-key add -
        echo 'deb https://dl.bintray.com/rabbitmq-erlang/debian bionic erlang' | sudo tee -a /etc/apt/sources.list.d/bintray.rabbitmq.list
        echo 'deb https://dl.bintray.com/rabbitmq/debian bionic main' | sudo tee -a /etc/apt/sources.list.d/bintray.rabbitmq.list
        sudo rm -f /etc/apt/sources.list.d/dotnetdev.list /etc/apt/sources.list.d/microsoft-prod.list
        sudo apt update
        sudo apt install postgresql-10 rabbitmq-server graphviz
        sudo systemctl status rabbitmq-server.service

    - name: Upgrade pip
      run: |
        pip install --upgrade pip
        pip --version

    - name: upgrade setuptools [py35]
      if: matrix.python-version == 3.5
      run: pip install -I setuptools==38.2.0  # Minimally required version for Python 3.5.

    - name: Install aiida-core
      run: |
        pip install -r requirements/requirements-py-${{ matrix.python-version }}.txt
        pip install --no-deps -e .
        reentry scan
        pip freeze

    - name: Setup environment
      env:
        AIIDA_TEST_BACKEND: ${{ matrix.backend }}
      run:
        .github/workflows/setup.sh

    - name: Run test suite
      env:
        AIIDA_TEST_BACKEND: ${{ matrix.backend }}
      run:
        .github/workflows/tests.sh

    - name: Upload coverage report
      if: matrix.python-version == 3.5 && github.repository == 'aiidateam/aiida-core'
      uses: codecov/codecov-action@v1
      with:
        name: aiida-pytests-py3.5-${{ matrix.backend }}
        flags: ${{ matrix.backend }}
        file: ./coverage.xml
        fail_ci_if_error: true

  verdi:

    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@master

    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install python dependencies
      run: |
        pip install numpy==1.17.4
        pip install -e .

    - name: Run verdi
      run: |
        verdi devel check-load-time
        .github/workflows/verdi.sh

  docker:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@master

    - name: Install docker
      run: |
        sudo apt-get update
        sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs)  stable"
        sudo apt-get update
        sudo apt-get install docker-ce

    - name: Build the aiida-core image
      run:
        docker build -t aiida-core .

    - name: Run aiida-core image and test the default aiida profile and localhost computer.
      run: |
        export DOCKERID=`docker run -d aiida-core`
        docker exec --tty $DOCKERID wait-for-services
        docker logs $DOCKERID
        docker exec --tty --user aiida $DOCKERID /bin/bash -l -c 'verdi profile show default'
        docker exec --tty --user aiida $DOCKERID /bin/bash -l -c 'verdi computer show localhost'
        docker exec --tty --user aiida $DOCKERID /bin/bash -l -c 'verdi daemon status'
