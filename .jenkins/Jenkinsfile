// Note: this part might happen on a different node than
// the one that will run the pipeline below, see
// https://stackoverflow.com/questions/44805076
// but it should be ok for us as we only have one node
def user_id
def group_id
node {
  user_id = sh(returnStdout: true, script: 'id -u').trim()
  group_id = sh(returnStdout: true, script: 'id -g').trim()
}

pipeline {
    agent {
        dockerfile {
            filename 'Dockerfile'
            dir '.jenkins'
            args '-u root:root -v jenkins-pip-cache:/home/jenkins/.cache/pip/'
            additionalBuildArgs "--build-arg uid=${user_id} --build-arg gid=${group_id}"
        }
    }
    environment {
        MOLECULE_GLOB = ".molecule/*/config_jenkins.yml"
        AIIDA_TEST_WORKERS = 2
        RUN_ALSO_DJANGO = "true"
        RUN_ALSO_SQLALCHEMY = "true"
    }
    stages {
        stage ('Init services') {
            steps {
                // we must run /sbin/my_init directly (rather than in a separate process)
                // see: https://github.com/phusion/baseimage-docker/blob/18.04-1.0.0/image/bin/my_init
                sh '/etc/my_init.d/00_regen_ssh_host_keys.sh'
                sh '/etc/my_init.d/10_create-system-user.sh'
                // we cannot run this task because it tries to write to the jenkins log file without permission:
                // Cannot contact : java.io.FileNotFoundException: /var/jenkins_home/workspace/aiida_core_aiidateam_PR-4565@2@tmp/durable-65ec45aa/jenkins-log.txt (Permission denied)
                // sh '/etc/my_init.d/10_syslog-ng.init'
                sh '/etc/my_init.d/20_start-rabbitmq.sh'
                sh '/etc/my_init.d/30_start-postgres.sh'
                sh '/sbin/my_init --skip-startup-files --no-kill-all-on-exit 2> /dev/null &'
            }
        }
        stage ('Prepare environment') {
            steps {
                    // Clean work dir
                    // often runs reshare the same folder, and it might contain old data from previous runs
                    // this is particularly problematic when a folder is deleted from git but .pyc files are left in
                    sh 'git clean -fdx'
                    // this folder is mounted from a volume so will have wrong permissions
                    sh 'sudo chown root:root /home/jenkins/.cache'
                    // prepare environment (install python dependencies etc)
                    sh 'molecule prepare --force'
                    // for some reason if we don't change permissions here then python can't import the modules
                    sh 'sudo chmod -R a+rwX /opt/conda/lib/python3.7/site-packages/'
                }
            }
        stage('Test') {
            failFast false // Do not kill one if the other fails
            parallel {
                stage('Test-Django') {
                    environment {
                        AIIDA_TEST_BACKEND="django"
                    }
                    when {
                        environment name: 'RUN_ALSO_DJANGO', value: 'true'
                    }
                    steps {
                        sh 'molecule test --parallel'
                    }
                }
                stage('Test-SQLAlchemy') {
                    environment {
                        AIIDA_TEST_BACKEND="sqlalchemy"
                    }
                    when {
                        environment name: 'RUN_ALSO_SQLALCHEMY', value: 'true'
                    }
                    steps {
                        sh 'molecule test --parallel'
                    }
                }
            }
        }
    }
    post {
        always {
            // Some debug stuff
            sh '''
               whoami
               pwd
               '''
	    cleanWs()
        }
        success {
            echo 'The run finished successfully!'
        }
        unstable {
            echo 'This run is unstable...'
        }
        failure {
            echo "This run failed..."
        }
        //  You can trigger actions when the status change (e.g. it starts failing,
        // or it starts working again - e.g. sending emails or similar)
        // possible variables: see e.g. https://qa.nuxeo.org/jenkins/pipeline-syntax/globals
        // Other valid names: fixed, regression (opposite of fixed), aborted (by user, typically)
        // Note that I had problems with email, I don't know if it is a configuration problem
        // or a missing plugin.
        changed {
            script {
                if (currentBuild.getPreviousBuild()) {
                    echo "The state changed from ${currentBuild.getPreviousBuild().result} to ${currentBuild.currentResult}."
                }
                else {
                    echo "This is the first build, and its status is: ${currentBuild.currentResult}."
                }
            }
        }
    }
    options {
        // we do not want the whole run to hang forever -
 	    // we set a total timeout of 30 minutes
        timeout(time: 30, unit: 'MINUTES')
    }
}


// Other things to add possibly:
// global options (or per-stage options) with timeout: https://jenkins.io/doc/book/pipeline/syntax/#options-example
// retry-on-failure for some specific tasks: https://jenkins.io/doc/book/pipeline/syntax/#available-stage-options
// parameters: https://jenkins.io/doc/book/pipeline/syntax/#parameters
// input: interesting for user input before continuing: https://jenkins.io/doc/book/pipeline/syntax/#input
// when conditions, e.g. to depending on details on the commit (e.g. only when specific
//     files are changed, where there is a string in the commit log, for a specific branch,
//     for a Pull Request,for a specific environment variable, ...):
//     https://jenkins.io/doc/book/pipeline/syntax/#when
