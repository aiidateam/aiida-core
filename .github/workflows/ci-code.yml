name: continuous-integration-code

on:
  push:
    branches-ignore: [gh-pages]
  pull_request:
    branches-ignore: [gh-pages]
    paths-ignore: ['docs/**']

jobs:

  check-requirements:

    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install utils/ dependencies
      run: pip install -r utils/requirements.txt

    - name: Check requirements files
      id: check_reqs
      run: python ./utils/dependency_management.py check-requirements DEFAULT

    - name: Create commit comment
      if: failure() && steps.check_reqs.outputs.error
      uses: peter-evans/commit-comment@v1
      with:
        path: pyproject.toml
        body: |
          ${{ steps.check_reqs.outputs.error }}

          Click [here](https://github.com/aiidateam/aiida-core/wiki/AiiDA-Dependency-Management) for more information on dependency management.

  tests:

    needs: [check-requirements]

    runs-on: ubuntu-latest
    timeout-minutes: 35

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.10']

    services:
      postgres:
        image: postgres:10
        env:
          POSTGRES_DB: test_aiida
          POSTGRES_PASSWORD: ''
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      rabbitmq:
        image: rabbitmq:latest
        ports:
          - 5672:5672
      slurm:
        image: xenonmiddleware/slurm:17
        ports:
          - 5001:22

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install postgresql graphviz

    - name: Upgrade pip and setuptools
      run: |
        pip install --upgrade pip setuptools
        pip --version

    - name: Build pymatgen with compatible numpy
      run: |
        # This step is necessary because certain versions of `pymatgen` will not specify an explicit version of
        # `numpy` in its build requirements, and so the latest version will be used. This causes problems,
        # however, because this means that the compiled version of `pymatgen` can only be used with that version
        # of `numpy` or higher, since `numpy` only guarantees forward compatibility of the ABI. If we want to
        # run with an older version of `numpy`, we need to ensure that `pymatgen` is built with that same
        # version. This we can accomplish by installing the desired version of `numpy` manually and then calling
        # the install command for `pymatgen` with the `--no-build-isolation` flag. This flag will ensure that
        # build dependencies are ignored and won't be installed (preventing the most recent version of `numpy`
        # to be installed) and the build relies on those requirements already being present in the environment.
        # We also need to install `wheel` because otherwise the `pymatgen` build will fail because `bdist_wheel`
        # will not be available.
        pip install numpy==1.21.4 wheel
        pip install pymatgen==2022.0.16 --no-cache-dir --no-build-isolation

    - name: Install aiida-core
      run: |
        pip install --use-feature=2020-resolver -r requirements/requirements-py-${{ matrix.python-version }}.txt
        pip install --use-feature=2020-resolver --no-deps -e .
        pip freeze

    - name: Setup environment
      run:
        .github/workflows/setup.sh

    - name: Run test suite
      env:
        AIIDA_WARN_v3: 1
        SQLALCHEMY_WARN_20: 1
      run:
        .github/workflows/tests.sh

    - name: Upload coverage report
      if: matrix.python-version == 3.8 && github.repository == 'aiidateam/aiida-core'
      uses: codecov/codecov-action@v1
      with:
        name: aiida-pytests-py3.8
        file: ./coverage.xml
        fail_ci_if_error: false  # don't fail job, if coverage upload fails

  verdi:

    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.10']

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install python dependencies
      run: pip install -e .

    - name: Run verdi
      run: |
        verdi devel check-load-time
        .github/workflows/verdi.sh
