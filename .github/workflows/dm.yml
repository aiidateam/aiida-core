name: aiida-core-dependency-management

on:
  push:
    branch:
      - develop
      - dm/*
      - misc/update-dependency-management   # TODO: Remove before merge
    paths:
      - 'setup.*'
      - 'environment.yml'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - '.github/workflows/*'
  schedule:
    - cron: '30 02 * * *'  # nightly build

jobs:

#  install-with-pip:
#
#    runs-on: ubuntu-latest
#    timeout-minutes: 5
#
#    steps:
#    - uses: actions/checkout@v2
#
#    - name: Set up Python 3.7
#      uses: actions/setup-python@v1
#      with:
#        python-version: 3.7
#
#    - name: Pip install
#      run: |
#        python -m pip install -e .
#        python -m pip freeze
#
#    - name: Test package import
#      run:
#        python -c "import aiida"
#
#  install-with-conda:
#
#    runs-on: ubuntu-latest
#    name: install-with-conda
#
#    timeout-minutes: 5
#
#    steps:
#    - uses: actions/checkout@v2
#
#    - name: Setup Conda
#      uses: s-weigand/setup-conda@v1
#      with:
#        update-conda: true
#        python-version: 3.7
#    - run: conda --version
#    - run: python --version
#    - run: which python
#
#    - name: Create conda environment
#      run: |
#        conda env create -f environment.yml -n test-environment
#        source activate test-environment
#        python -m pip install --no-deps -e .
#
#    - name: Test package import
#      run: |
#        source activate test-environment
#        python -c "import aiida"
#
  tests:

    #needs: [install-with-pip, install-with-conda]
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8]  # TODO: Change to all supported Python versions before merge
        backend: ['django'] # TODO: Add 'sqlalchemy' before merge

    steps:
    - uses: actions/checkout@v2
#    - uses: CasperWA/postgresql-action@v1.2
#      with:
#        postgresql version: '10'
#        postgresql db: test_${{ matrix.backend }}
#        postgresql user: postgres
#        postgresql password: ''
#        postgresql auth: trust
#
#    - name: Set up Python ${{ matrix.python-version }}
#      uses: actions/setup-python@v1
#      with:
#        python-version: ${{ matrix.python-version }}
#
#    - name: Install system dependencies
#      run: |
#        wget -O - "https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc" | sudo apt-key add -
#        echo 'deb https://dl.bintray.com/rabbitmq-erlang/debian bionic erlang' | sudo tee -a /etc/apt/sources.list.d/bintray.rabbitmq.list
#        echo 'deb https://dl.bintray.com/rabbitmq/debian bionic main' | sudo tee -a /etc/apt/sources.list.d/bintray.rabbitmq.list
#        sudo rm -f /etc/apt/sources.list.d/dotnetdev.list /etc/apt/sources.list.d/microsoft-prod.list
#        sudo apt update
#        sudo apt install postgresql-10 rabbitmq-server graphviz
#        sudo systemctl status rabbitmq-server.service
#
#    - name: Install python dependencies
#      run: |
#        pip install --upgrade pip
#        pip install numpy==1.17.4
#        pip install -e .[atomic_tools,docs,notebook,rest,testing]
#        reentry scan
#
#    - name: Setup environment
#      env:
#        AIIDA_TEST_BACKEND: ${{ matrix.backend }}
#      run:
#        .github/workflows/setup.sh
#
#    - name: Run test suite
#      env:
#        AIIDA_TEST_BACKEND: ${{ matrix.backend }}
#      run:
#        .github/workflows/tests.sh
#
    - name: Freeze test environment
      run: |
        pip freeze | tee requirements-${{ matrix.backend }}-py-${{ matrix.python-version }}.txt

    - name: Upload requirements.txt
      uses: actions/upload-artifact@v1
      with:
        name: requirements.txt
        path: requirements-${{ matrix.backend }}-py-${{ matrix.python-version }}.txt

  update-requirements:

    needs: tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Download requirements.txt files
        uses: actions/download-artifact@v1
        with:
          name: requirements.txt
          path: tmp

      - name: Prepare requirements.txt
        run: |
          mv tmp/requirements-django-py-3.8.txt requirements.txt
          sed -i '1d' requirements.txt
          rm -r tmp/

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v2
        with:
          commit-message: "Update requirements.txt"
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Update requirements.txt"
          team-reviewers: aiidateam/dependency-manager
          branch: "dm/update-requirements.txt"
