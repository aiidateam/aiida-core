# this is mainly a copy of https://github.com/ansible-community/molecule-docker/blob/master/molecule_docker/playbooks/create.yml
# with fix: https://github.com/ansible-community/molecule-docker/pull/30
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: "{{ molecule_no_log }}"
  vars:
    molecule_labels:
      owner: molecule
  tasks:

  - name: Discover local Docker images
    docker_image_info:
      name: "molecule_local/{{ item.name }}"
      docker_host: "{{ item.docker_host | default(lookup('env', 'DOCKER_HOST') or 'unix://var/run/docker.sock') }}"
      cacert_path: "{{ item.cacert_path | default((lookup('env', 'DOCKER_CERT_PATH') + '/ca.pem') if lookup('env', 'DOCKER_CERT_PATH') else omit) }}"
      cert_path: "{{ item.cert_path | default((lookup('env', 'DOCKER_CERT_PATH') + '/cert.pem')  if lookup('env', 'DOCKER_CERT_PATH') else omit) }}"
      key_path: "{{ item.key_path | default((lookup('env', 'DOCKER_CERT_PATH') + '/key.pem') if lookup('env', 'DOCKER_CERT_PATH') else omit) }}"
      tls_verify: "{{ item.tls_verify | default(lookup('env', 'DOCKER_TLS_VERIFY')) or false }}"
    with_items: "{{ molecule_yml.platforms }}"
    register: docker_images

  - name: Build the container image
    when:
      - docker_images.results | map(attribute='images') | select('equalto', []) | list | count >= 0
    docker_image:
      build:
        path: "{{ item.context | default(molecule_ephemeral_directory) }}"
        dockerfile: "{{ item.dockerfile | default(molecule_scenario_directory + '/Dockerfile') }}"
        pull: "{{ item.pull | default(true) }}"
        network: "{{ item.network_mode | default(omit) }}"
        args: "{{ item.buildargs | default(omit) }}"
      name: "molecule_local/{{ item.image }}"
      docker_host: "{{ item.docker_host | default(lookup('env', 'DOCKER_HOST') or 'unix://var/run/docker.sock') }}"
      cacert_path: "{{ item.cacert_path | default((lookup('env', 'DOCKER_CERT_PATH') + '/ca.pem') if lookup('env', 'DOCKER_CERT_PATH') else omit) }}"
      cert_path: "{{ item.cert_path | default((lookup('env', 'DOCKER_CERT_PATH') + '/cert.pem')  if lookup('env', 'DOCKER_CERT_PATH') else omit) }}"
      key_path: "{{ item.key_path | default((lookup('env', 'DOCKER_CERT_PATH') + '/key.pem') if lookup('env', 'DOCKER_CERT_PATH') else omit) }}"
      tls_verify: "{{ item.tls_verify | default(lookup('env', 'DOCKER_TLS_VERIFY')) or false }}"
      force_source: "{{ item.force | default(true) }}"
      source: build
    with_items: "{{ molecule_yml.platforms }}"
    loop_control:
      label: "molecule_local/{{ item.image }}"
    no_log: false
    register: result
    until: result is not failed
    retries: "{{ item.retries | default(3) }}"
    delay: 30

  - debug:
      var: result

  - name: Determine the CMD directives
    set_fact:
      command_directives_dict: >-
        {{ command_directives_dict | default({}) |
            combine({ item.name: item.command | default('bash -c "while true; do sleep 10000; done"') })
        }}
    with_items: "{{ molecule_yml.platforms }}"
    when: item.override_command | default(true)

  - name: Create molecule instance(s)
    docker_container:
      name: "{{ item.name }}"
      docker_host: "{{ item.docker_host | default(lookup('env', 'DOCKER_HOST') or 'unix://var/run/docker.sock') }}"
      cacert_path: "{{ item.cacert_path | default((lookup('env', 'DOCKER_CERT_PATH') + '/ca.pem') if lookup('env', 'DOCKER_CERT_PATH') else omit) }}"
      cert_path: "{{ item.cert_path | default((lookup('env', 'DOCKER_CERT_PATH') + '/cert.pem')  if lookup('env', 'DOCKER_CERT_PATH') else omit) }}"
      key_path: "{{ item.key_path | default((lookup('env', 'DOCKER_CERT_PATH') + '/key.pem') if lookup('env', 'DOCKER_CERT_PATH') else omit) }}"
      tls_verify: "{{ item.tls_verify | default(lookup('env', 'DOCKER_TLS_VERIFY')) or false }}"
      hostname: "{{ item.hostname | default(item.name) }}"
      image: "{{ item.pre_build_image | default(false) | ternary('', 'molecule_local/') }}{{ item.image }}"
      pull: "{{ item.pull | default(omit) }}"
      memory: "{{ item.memory | default(omit) }}"
      memory_swap: "{{ item.memory_swap | default(omit) }}"
      state: started
      recreate: false
      log_driver: json-file
      command: "{{ (command_directives_dict | default({}))[item.name] | default(omit) }}"
      user: "{{ item.user | default(omit) }}"
      pid_mode: "{{ item.pid_mode | default(omit) }}"
      privileged: "{{ item.privileged | default(omit) }}"
      security_opts: "{{ item.security_opts | default(omit) }}"
      devices: "{{ item.devices | default(omit) }}"
      volumes: "{{ item.volumes | default(omit) }}"
      tmpfs: "{{ item.tmpfs | default(omit) }}"
      capabilities: "{{ item.capabilities | default(omit) }}"
      sysctls: "{{ item.sysctls | default(omit) }}"
      exposed_ports: "{{ item.exposed_ports | default(omit) }}"
      published_ports: "{{ item.published_ports | default(omit) }}"
      ulimits: "{{ item.ulimits | default(omit) }}"
      networks: "{{ item.networks | default(omit) }}"
      network_mode: "{{ item.network_mode | default(omit) }}"
      networks_cli_compatible: "{{ item.networks_cli_compatible | default(true) }}"
      purge_networks: "{{ item.purge_networks | default(omit) }}"
      dns_servers: "{{ item.dns_servers | default(omit) }}"
      etc_hosts: "{{ item.etc_hosts | default(omit) }}"
      env: "{{ item.env | default(omit) }}"
      restart_policy: "{{ item.restart_policy | default(omit) }}"
      restart_retries: "{{ item.restart_retries | default(omit) }}"
      tty: "{{ item.tty | default(omit) }}"
      labels: "{{ molecule_labels | combine(item.labels | default({})) }}"
      container_default_behavior: "{{ item.container_default_behavior | default('compatibility' if ansible_version.full is version_compare('2.10', '>=') else omit) }}"
      healthcheck: "{{ item.healthcheck | default(omit) }}"
    register: server
    with_items: "{{ molecule_yml.platforms }}"
    loop_control:
      label: "{{ item.name }}"
    no_log: false
    async: 7200
    poll: 0

  - name: Wait for instance(s) creation to complete
    async_status:
      jid: "{{ item.ansible_job_id }}"
    register: docker_jobs
    until: docker_jobs.finished
    retries: 300
    with_items: "{{ server.results }}"
    no_log: false
